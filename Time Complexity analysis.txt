* What's time Complexity?
    How does the running time change as the size of input change.

* Running time depends on:
    1- Processor.
    2- Read/Write speed to memory.
    3- 32 bit VS 64 bit.
    4- INPUT.
    5- ...

* What are the cases your code may face?
    1- Best case.
    2- Worst case.
    3- Average case.

* The notations to represent your code's Complexity:
    1- Big O Notation     ---->     the upper bound of the time.
    2- Omega Notation     ---->     the lower bound of the time.
    3- Theta Notation     ---->     the bound itself.

* Rules:
    1- Running time is the sum of running times of all consecutive blocks.
    2- Nested loops are multiplied.
        In general -> Nested repetitive Blocks are multiplied.
    3- In Conditional statements pick the "Worst case" one.
    4- Drop Constants (addition, subtraction, multiplication or division).
    5- Drop all lower order terms.


* Some useful Observations:
  Big O                 Name                    Max n
-------------------------------------------------------------------------------------------
  O(1)        ---->     Constant      ---->     1e18      ---->     Math, Observation
  O(Log(n))   ---->     Logarithmic   ---->     1e18      ---->     Binary Search (lower -upper- bound)
  O(n)        ---->     Linear        ---->     1e8       ---->     one loop
  O(n*Log(n)) ---->     LogLinear     ---->     4e5       ---->     Sorting, loop + binary search
  O(n^2)      ---->     Quadratic     ---->     1e4       ---->     nested loop
  O(2^n)      ---->     Exponential   ---->     25        ---->     Bitmasks, finding all possible answers
  O(n!)       ---->     factorial     ---->     11        ---->     finding all permutations
